@page "/create/skill"
@using UntitledRpgLogic.Core.Configuration
@using UntitledRpgLogic.Core.Enums
@using UntitledRpgLogic.Core.Options

<div class="container mx-auto p-6">
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <h2 class="card-title text-2xl mb-6">New Skill</h2>

            <EditForm Model="@skillConfig" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Basic Information -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Name <span class="text-error">*</span></span>
                        </label>
                        <InputText @bind-Value="skillConfig.Name" class="input input-bordered"
                                   placeholder="Enter skill name"/>
                        <ValidationMessage For="@(() => skillConfig.Name)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Scaling Curve Type</span>
                        </label>
                        <InputSelect @bind-Value="selectedScalingCurve" class="select select-bordered">
                            <option value="">Select scaling curve (optional)</option>
                            @foreach (var curve in Enum.GetValues<ScalingCurveType>())
                            {
                                <option value="@curve">@curve</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <!-- Description -->
                <div class="form-control mt-4">
                    <label class="label">
                        <span class="label-text">Description</span>
                    </label>
                    <InputTextArea @bind-Value="skillConfig.Description" class="textarea textarea-bordered h-24"
                                   placeholder="Enter skill description (optional)"/>
                </div>

                <!-- Leveling Options -->
                <div class="collapse collapse-arrow bg-base-200 mt-4">
                    <input type="checkbox"/>
                    <div class="collapse-title text-xl font-medium">
                        Leveling Options
                    </div>
                    <div class="collapse-content">
                        <div class="alert alert-info mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                 class="stroke-current shrink-0 w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>Leveling options control how the skill progresses. Leave blank to use default settings.</span>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Experience Multiplier</span>
                                </label>
                                <InputNumber @bind-Value="expMultiplier" class="input input-bordered"
                                             placeholder="Enter multiplier (optional)"/>
                                <div class="label">
                                    <span class="label-text-alt">Controls how quickly experience is gained</span>
                                </div>
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Max Level</span>
                                </label>
                                <InputNumber @bind-Value="maxLevel" class="input input-bordered"
                                             placeholder="Enter max level (optional)"/>
                                <div class="label">
                                    <span class="label-text-alt">Maximum level this skill can reach</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Options -->
                <div class="collapse collapse-arrow bg-base-200 mt-4">
                    <input type="checkbox"/>
                    <div class="collapse-title text-xl font-medium">
                        Advanced Options
                    </div>
                    <div class="collapse-content">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Explicit ID</span>
                            </label>
                            <InputText @bind-Value="explicitIdString" class="input input-bordered"
                                       placeholder="Enter explicit GUID (optional)"/>
                        </div>
                    </div>
                </div>

                <div class="card-actions justify-end mt-6">
                    <button type="button" class="btn btn-ghost" @onclick="ResetForm">Reset</button>
                    <button type="submit" class="btn btn-primary">Create Skill</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private SkillDataConfig skillConfig = new() { Name = "" };
    private string explicitIdString = "";
    private ScalingCurveType? selectedScalingCurve;
    private float? expMultiplier;
    private int? maxLevel;

    protected override void OnInitialized()
    {
        ResetForm();
    }

    private void HandleValidSubmit()
    {
        // Create leveling options if any values are set
        if (selectedScalingCurve.HasValue || expMultiplier.HasValue || maxLevel.HasValue)
        {
            var levelingOptions = new LevelingOptions();

            if (selectedScalingCurve.HasValue)
            {
                levelingOptions = levelingOptions with { ScalingCurve = selectedScalingCurve.Value };
            }

            // Note: LevelingOptions may have other properties that need to be set
            // This is a simplified example based on the available information
            skillConfig = skillConfig with { LevelingOptions = levelingOptions };
        }

        // Parse explicit ID
        if (!string.IsNullOrEmpty(explicitIdString) && Guid.TryParse(explicitIdString, out var explicitId))
        {
            skillConfig = skillConfig with { ExplicitId = explicitId };
        }

        // TODO: Handle skill creation logic
        Console.WriteLine($"Skill created: {skillConfig.Name}");
    }

    private void ResetForm()
    {
        skillConfig = new SkillDataConfig { Name = "" };
        explicitIdString = "";
        selectedScalingCurve = null;
        expMultiplier = null;
        maxLevel = null;
    }

}
