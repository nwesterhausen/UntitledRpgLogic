@page "/create/material"
@using System.Drawing
@using UntitledRpgLogic.Core.Configuration

<div class="container mx-auto p-6">
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <h2 class="card-title text-2xl mb-6">New Material</h2>

            <EditForm Model="@materialConfig" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Basic Information -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Name <span class="text-error">*</span></span>
                        </label>
                        <InputText @bind-Value="materialConfig.Name" class="input input-bordered"
                                   placeholder="Enter material name"/>
                        <ValidationMessage For="@(() => materialConfig.Name)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Plural Name</span>
                        </label>
                        <InputText @bind-Value="materialConfig.PluralName" class="input input-bordered"
                                   placeholder="Enter plural name (optional)"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Name as Adjective</span>
                        </label>
                        <InputText @bind-Value="materialConfig.NameAsAdjective" class="input input-bordered"
                                   placeholder="Enter adjective form (optional)"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Molar Mass (g/mol) <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.MolarMass" class="input input-bordered"
                                     placeholder="Enter molar mass"/>
                        <ValidationMessage For="@(() => materialConfig.MolarMass)" class="text-error text-sm"/>
                    </div>
                </div>

                <!-- Solid State Properties -->
                <div class="divider">Solid State Properties</div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Solid Color <span class="text-error">*</span></span>
                        </label>
                        <input type="color" @bind="solidColorHex" class="input input-bordered h-12"/>
                        <ValidationMessage For="@(() => materialConfig.SolidColor)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Solid State Change Temperature (°C) <span
                                    class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.TemperatureAtSolidStateChange"
                                     class="input input-bordered" placeholder="Enter temperature"/>
                        <ValidationMessage For="@(() => materialConfig.TemperatureAtSolidStateChange)"
                                           class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Solid Density (g/cm³) <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.DensityAtSolidStateChange" class="input input-bordered"
                                     placeholder="Enter density"/>
                        <ValidationMessage For="@(() => materialConfig.DensityAtSolidStateChange)"
                                           class="text-error text-sm"/>
                    </div>
                </div>

                <!-- Liquid State Properties -->
                <div class="divider">Liquid State Properties</div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Liquid Color</span>
                        </label>
                        <input type="color" @bind="liquidColorHex" class="input input-bordered h-12"/>
                        <div class="label">
                            <span class="label-text-alt">Optional - defaults to red if not specified</span>
                        </div>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Liquid State Change Temperature (°C) <span
                                    class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.TemperatureAtLiquidStateChange"
                                     class="input input-bordered" placeholder="Enter temperature"/>
                        <ValidationMessage For="@(() => materialConfig.TemperatureAtLiquidStateChange)"
                                           class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Liquid Density (g/cm³) <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.DensityAtLiquidStateChange"
                                     class="input input-bordered" placeholder="Enter density"/>
                        <ValidationMessage For="@(() => materialConfig.DensityAtLiquidStateChange)"
                                           class="text-error text-sm"/>
                    </div>
                </div>

                <!-- Gas State Properties -->
                <div class="divider">Gas State Properties</div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Gas Color</span>
                        </label>
                        <input type="color" @bind="gasColorHex" class="input input-bordered h-12"/>
                        <div class="label">
                            <span class="label-text-alt">Optional - defaults to gray if not specified</span>
                        </div>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Gas State Change Temperature (°C) <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.TemperatureAtGasStateChange"
                                     class="input input-bordered" placeholder="Enter temperature"/>
                        <ValidationMessage For="@(() => materialConfig.TemperatureAtGasStateChange)"
                                           class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Gas Density (g/cm³) <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="materialConfig.DensityAtGasStateChange" class="input input-bordered"
                                     placeholder="Enter density"/>
                        <ValidationMessage For="@(() => materialConfig.DensityAtGasStateChange)"
                                           class="text-error text-sm"/>
                    </div>
                </div>

                <!-- Advanced Options -->
                <div class="collapse collapse-arrow bg-base-200 mt-4">
                    <input type="checkbox"/>
                    <div class="collapse-title text-xl font-medium">
                        Advanced Options
                    </div>
                    <div class="collapse-content">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Explicit ID</span>
                            </label>
                            <InputText @bind-Value="explicitIdString" class="input input-bordered"
                                       placeholder="Enter explicit GUID (optional)"/>
                        </div>
                    </div>
                </div>

                <div class="card-actions justify-end mt-6">
                    <button type="button" class="btn btn-ghost" @onclick="ResetForm">Reset</button>
                    <button type="submit" class="btn btn-primary">Create Material</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private MaterialDataConfig materialConfig = new()
    {
        Name = "",
        SolidColor = Color.Black,
        TemperatureAtSolidStateChange = 0,
        DensityAtSolidStateChange = 1,
        TemperatureAtLiquidStateChange = 100,
        DensityAtLiquidStateChange = 1,
        TemperatureAtGasStateChange = 373,
        DensityAtGasStateChange = 0.001f,
        MolarMass = 1,
        SolidCoefficientOfExpansion = 0,
        LiquidCoefficientOfExpansion = 0
    };

    private string explicitIdString = "";
    private string solidColorHex = "#000000";
    private string liquidColorHex = "#ff0000";
    private string gasColorHex = "#808080";

    protected override void OnInitialized()
    {
        ResetForm();
    }

    private void HandleValidSubmit()
    {
        // Parse colors
        if (ColorTranslator.FromHtml(solidColorHex) is Color solidColor)
        {
            materialConfig.SolidColor = solidColor;
        }

        if (!string.IsNullOrEmpty(liquidColorHex) && ColorTranslator.FromHtml(liquidColorHex) is Color liquidColor)
        {
            materialConfig.LiquidColor = liquidColor;
        }

        if (!string.IsNullOrEmpty(gasColorHex) && ColorTranslator.FromHtml(gasColorHex) is Color gasColor)
        {
            materialConfig.GasColor = gasColor;
        }

        // Parse explicit ID
        if (!string.IsNullOrEmpty(explicitIdString) && Guid.TryParse(explicitIdString, out var explicitId))
        {
            materialConfig = materialConfig with { ExplicitId = explicitId };
        }

        // TODO: Handle material creation logic
        Console.WriteLine($"Material created: {materialConfig.Name}");
    }

    private void ResetForm()
    {
        materialConfig = new MaterialDataConfig
        {
            Name = "",
            SolidColor = Color.Black,
            TemperatureAtSolidStateChange = 0,
            DensityAtSolidStateChange = 1,
            TemperatureAtLiquidStateChange = 100,
            DensityAtLiquidStateChange = 1,
            TemperatureAtGasStateChange = 373,
            DensityAtGasStateChange = 0.001f,
            MolarMass = 1,
            SolidCoefficientOfExpansion = 0,
            LiquidCoefficientOfExpansion = 0
        };
        explicitIdString = "";
        solidColorHex = "#000000";
        liquidColorHex = "#ff0000";
        gasColorHex = "#808080";
    }

}
