@using UntitledRpgLogic.DevTool.Services.Contracts
@using UntitledRpgLogic.Core.Interfaces
@using UntitledRpgLogic.Core.Configuration
@using UntitledRpgLogic.Core.Enums
@inject IConfigStore ConfigStore


<div class="drawer drawer-end z-50">
<input id="config-drawer-toggle" type="checkbox" class="drawer-toggle" @bind="@IsDrawerOpen" />
    <label for="config-drawer-toggle" aria-label="close sidebar" class="drawer-overlay"></label>
    <aside class="bg-base-200 text-base-content min-h-full w-80 p-4">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold">Config Files</h2>
            <label for="config-drawer-toggle" class="btn btn-sm btn-circle btn-ghost">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </label>
        </div>

        <div class="space-y-2">
            @if (configs.Any())
            {
                @foreach (var configItem in configs)
                {
                    <div class="card bg-base-100 shadow-sm border border-base-300">
                        <div class="card-body p-3">
                            <div class="flex items-center justify-between">
                                <div class="flex-1">
                                    <h3 class="text-sm font-medium">@GetConfigDisplayName(configItem.Config)</h3>
                                    <p class="text-xs text-base-content/70">@configItem.Id.ToString("N")[..8]</p>
                                </div>
                                <div class="badge badge-outline">@GetConfigTypeName(configItem.Config.ConfigType)</div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center text-base-content/50 py-8">
                    <p>No configuration files stored</p>
                </div>
            }
        </div>
    </aside>
</div>

@code {
    [Parameter] public bool IsDrawerOpen { get; set; }
    [Parameter] public EventCallback<bool> IsDrawerOpenChanged { get; set; }

    private List<ConfigItem> configs = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigs();
    }

    private async Task LoadConfigs()
    {
        configs.Clear();
        
        foreach (var key in ConfigStore.GetAllKeys())
        {
            var config = ConfigStore.GetConfig(key);
            if (config != null)
            {
                configs.Add(new ConfigItem { Id = key, Config = config });
            }
        }
        
        StateHasChanged();
    }

    private string GetConfigDisplayName(ITomlConfig config)
    {
        return config switch
        {
            MaterialDataConfig material => material.Name,
            ItemDataConfig item => item.Name,
            SkillDataConfig skill => skill.Name,
            StatDataConfig stat => stat.Name,
            AuthorConfig author => author.AuthorName,
            ModuleInfoConfig module => module.Name,
            _ when HasNameProperty(config) => GetNamePropertyValue(config),
            _ => config.ConfigType.ToString()
        };
    }

    private bool HasNameProperty(ITomlConfig config)
    {
        var nameProperty = config.GetType().GetProperty("Name");
        return nameProperty != null && nameProperty.PropertyType == typeof(string);
    }

    private string GetNamePropertyValue(ITomlConfig config)
    {
        var nameProperty = config.GetType().GetProperty("Name");
        return nameProperty?.GetValue(config)?.ToString() ?? config.ConfigType.ToString();
    }

    private string GetConfigTypeName(ConfigType configType)
    {
        return configType switch
        {
            ConfigType.Author => "Author",
            ConfigType.ModuleInfo => "Module",
            ConfigType.Item => "Item",
            ConfigType.Material => "Material",
            ConfigType.Skill => "Skill",
            ConfigType.Stat => "Stat",
            _ => "Unknown"
        };
    }

    private record ConfigItem
    {
        public required Guid Id { get; init; }
        public required ITomlConfig Config { get; init; }
    }

    public async Task RefreshConfigs()
    {
        await LoadConfigs();
    }
}
