name: Deploy Dev Tooling App

on:
  push:
    # This will only run on tags that match v*.*.* (e.g. v1.0.0)
    tags:
      - 'v*.*.*'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  actions: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "devtool"
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy Dev Tool
    runs-on: ubuntu-latest
    steps:
      - name: üìù Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup .NET 8 & 9
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4
        id: setup-dotnet-cf
        with:
          dotnet-version: 9.0.x

      - name: ü•ü Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: latest

      - name: üì¶ Cache DotNet Workloads
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.dotnet # Path to cache for SDKs and Workloads
          key: ${{ runner.os }}-dotnet-workloads-${{ hashFiles('global.json') }}-${{ steps.setup-dotnet-cf.outputs.dotnet-version }}
          restore-keys: |
            ${{ runner.os }}-dotnet-workloads-

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üì¶ Cache DotNet Tools
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.dotnet/tools # Path to cache for global tools
          key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('.config/dotnet-tools.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-tools-

      - name: üì• Restore dependencies
        run: |
          dotnet workload restore
          dotnet tool restore
          dotnet restore

      - name: üöÄ Publish Dev Tool
        run: dotnet publish UntitledRpgLogic.DevTool/UntitledRpgLogic.DevTool.csproj -c Release -o ./blazor_publish_output --nologo --base-path /

      - name: ‚òÅÔ∏è Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PAGES_PROJECT_NAME_DEVTOOL }} # Name of your Cloudflare Pages project
          directory: ./blazor_publish_output # The directory containing your published Blazor app files
          # No build command is typically needed here as dotnet publish already built the app
          # command: "echo No build command needed, already published"
