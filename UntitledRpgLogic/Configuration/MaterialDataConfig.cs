using System.ComponentModel.DataAnnotations;
using System.Drawing;
using UntitledRpgLogic.Interfaces;

namespace UntitledRpgLogic.Configuration;

/// <summary>
///     The configuration for a material in the game. This class defines the properties of a material, including its name,
///     color, temperature and density at different states of matter.
/// </summary>
public class MaterialDataConfig : ITomlConfig
{
    /// <summary>
    ///     Optional. If provided in TOML, this specific Guid will be used for the material.
    ///     If omitted, a new Guid will be generated by the game.
    /// </summary>
    public Guid? ExplicitId { get; init; }

    /// <summary>
    ///     Materials will always have a name. This is required.
    /// </summary>
    [Required]
    public required string Name { get; init; }

    /// <summary>
    ///     An optional plural name for the material. If not provided, the game will attempt to guess a plural form of the
    ///     Name.
    /// </summary>
    public string? PluralName { get; init; }

    /// <summary>
    ///     An optional name for the material that can be used as an adjective. E.g. "Copper" Soup vs "Coppery" Soup.
    ///     <remarks>If not provided, the Name will be used as the adjective.</remarks>
    /// </summary>
    public string? NameAsAdjective { get; init; }

    /// <summary>
    ///     Optional. A color to represent the material in this state. This can be used to visually represent the material in a
    ///     game or
    ///     application. If not provided, will default to be a red color.
    /// </summary>
    public Color? LiquidColor { get; set; }

    /// <summary>
    ///     The temperature at which the material changes state, in degrees Celsius (°C).
    /// </summary>
    [Required]
    public required float TemperatureAtLiquidStateChange { get; set; }

    /// <summary>
    ///     The density of the material at the state change, in grams per cubic centimeter (g/cm³).
    /// </summary>
    [Required]
    public required float DensityAtLiquidStateChange { get; set; }


    /// <summary>
    ///     A color to represent the material in this state. This can be used to visually represent the material in a game or
    ///     application.
    /// </summary>
    [Required]
    public required Color SolidColor { get; set; }

    /// <summary>
    ///     The temperature at which the material changes state, in degrees Celsius (°C).
    /// </summary>
    [Required]
    public required float TemperatureAtSolidStateChange { get; set; }

    /// <summary>
    ///     The density of the material at the state change, in grams per cubic centimeter (g/cm³).
    /// </summary>
    [Required]
    public required float DensityAtSolidStateChange { get; set; }


    /// <summary>
    ///     Optional. A color to represent the material in this state. This can be used to visually represent the material in a
    ///     game or
    ///     application. If not provided, will default to be a gray color.
    /// </summary>
    public Color? GasColor { get; set; }

    /// <summary>
    ///     The temperature at which the material changes state, in degrees Celsius (°C).
    /// </summary>
    [Required]
    public required float TemperatureAtGasStateChange { get; set; }

    /// <summary>
    ///     The density of the material at the state change, in grams per cubic centimeter (g/cm³).
    /// </summary>
    [Required]
    public required float DensityAtGasStateChange { get; set; }

    /// <summary>
    ///     The molar mass of the material in grams per mole (g/mol).
    /// </summary>
    [Required]
    public required double MolarMass { get; set; }

    /// <summary>
    ///     The coefficient of expansion (α) in 1/°C for the solid state.
    /// </summary>
    [Required]
    public required double SolidCoefficientOfExpansion { get; set; }

    /// <summary>
    ///     The coefficient of expansion (β) in 1/°C for the liquid state.
    /// </summary>
    [Required]
    public required double LiquidCoefficientOfExpansion { get; set; }
}
