using UntitledRpgLogic.Enums;

namespace UntitledRpgLogic.Configuration;

/// <summary>
///     The definition for the configuration of an Item. This is what is parsed from a TOML file to then create an actual
///     item in the game.
/// </summary>
public class ItemDataConfig
{
    /// <summary>
    ///     Optional. If provided in TOML, this specific Guid will be used for the item.
    ///     If omitted, a new Guid will be generated by the game.
    /// </summary>
    public Guid? ExplicitId { get; init; }

    /// <summary>
    ///     Items will always have a name. This is required.
    /// </summary>
    public required string Name { get; init; }

    /// <summary>
    ///     An optional plural name for the item. If not provided, the game will attempt to guess a plural form of the Name.
    /// </summary>
    public string? PluralName { get; init; }

    /// <summary>
    ///     An optional name for the item that can be used as an adjective. E.g. "Sword" Soup vs "Swordy" Soup.
    ///     <remarks>If not provided, the Name will be used as the adjective.</remarks>
    /// </summary>
    public string? NameAsAdjective { get; init; }

    /// <summary>
    ///     An optional quality for the item. This can be used to define the rarity or quality of the item. If not supplied,
    ///     the default will be <see cref="Quality.None" />
    /// </summary>
    public Quality? ItemQuality { get; init; }

    /// <summary>
    ///     The type of the item. This is required and defines the general category of the item, such as Weapon, Armor, etc.
    /// </summary>
    public required ItemType ItemType { get; init; }

    /// <summary>
    ///     A subtype for the item. This can be used to further categorize the item within its type. Defaults to
    ///     <see cref="ItemSubtype.None" />.
    /// </summary>
    public ItemSubtype? ItemSubtype { get; init; }

    /// <summary>
    ///     A short description of the item. This is optional and can be used to provide additional context or flavor text
    /// </summary>
    public string? Description { get; init; }

    /// <summary>
    ///     An optional GUID representing the creator of the item. This can be used to track who crafted the item.
    /// </summary>
    public Guid? CraftedBy { get; init; }

    /// <summary>
    ///     Optionally specify a specific dimension scale for the item's width, height, and depth. If not provided, they
    ///     will be interpreted as being in the default scale of <see cref="Enums.DimensionScale.cm" />.
    /// </summary>
    public DimensionScale? DimensionScale { get; init; }

    /// <summary>
    ///     Optional. This can be inferred based on the <see cref="ItemType" /> and <see cref="ItemSubtype" />, but can be
    ///     specified explicitly if needed. This is used for calculating the volume and other spatial properties of the item.
    /// </summary>
    public ShapeType? ShapeType { get; init; }

    /// <summary>
    ///     The width of the item in the specified dimension scale. This is required and must be a positive value.
    /// </summary>
    public float Width { get; init; }

    /// <summary>
    ///     The height of the item in the specified dimension scale. This is required and must be a positive value.
    /// </summary>
    public float Height { get; init; }

    /// <summary>
    ///     Optional. The depth of the item in the specified dimension scale. If not provided, it will default to 1 unit.
    /// </summary>
    public float? Depth { get; init; }

    /// <summary>
    ///     A reference to the material that this item is made of. This is a GUID that points to a material entity. Some
    ///     predefined materials are available listed under <see cref="ReservedGuids" />. If you want to use a custom or
    ///     user-defined material, specify the GUID here that is specified in that material's configuration under
    ///     <see cref="ExplicitId" />
    /// </summary>
    public Guid MaterialId { get; init; }
}