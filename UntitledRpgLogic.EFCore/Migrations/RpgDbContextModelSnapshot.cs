// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UntitledRpgLogic.EFCore;

#nullable disable

namespace UntitledRpgLogic.EFCore.Migrations
{
    [DbContext(typeof(RpgDbContext))]
    partial class RpgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("UntitledRpgLogic.Models.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.EntitySkills", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstancedSkillId")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId", "InstancedSkillId");

                    b.HasIndex("InstancedSkillId");

                    b.ToTable("EntitySkills");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.EntityStats", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstancedStatId")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId", "InstancedStatId");

                    b.HasIndex("InstancedStatId");

                    b.ToTable("EntityStats");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.InstancedSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SkillDefinitionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InstancedSkills");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.InstancedStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ApparentValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OwnerEntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StatDefinitionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StatDefinitionId");

                    b.ToTable("InstancedStats");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.LinkedStats", b =>
                {
                    b.Property<Guid>("DependentStatId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LinkedStatId")
                        .HasColumnType("TEXT");

                    b.HasKey("DependentStatId", "LinkedStatId");

                    b.HasIndex("LinkedStatId");

                    b.ToTable("LinkedStats");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.ModificationEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("FlatAmount")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<float>("PercentageOfMax")
                        .HasColumnType("REAL");

                    b.Property<bool>("Positive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ModificationEffects");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.ModifierDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("Duration")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsAdditive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMultiplicative")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LoseAllStacksOnExpiration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxStacks")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ModifierEffectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ScalesOnBaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StackEffectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModifierEffectId");

                    b.HasIndex("StackEffectId");

                    b.ToTable("ModifierDefinitions");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.SkillDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("ScalingFactorA")
                        .HasColumnType("REAL");

                    b.Property<float>("ScalingFactorB")
                        .HasColumnType("REAL");

                    b.Property<float>("ScalingFactorC")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsForFirstLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScalingCurve")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SkillDefinitions");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.StatDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasChangeableValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Variation")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("StatDefinitions");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.EntitySkills", b =>
                {
                    b.HasOne("UntitledRpgLogic.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntitledRpgLogic.Models.InstancedSkill", "InstancedSkill")
                        .WithMany()
                        .HasForeignKey("InstancedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("InstancedSkill");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.EntityStats", b =>
                {
                    b.HasOne("UntitledRpgLogic.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntitledRpgLogic.Models.InstancedStat", "InstancedStat")
                        .WithMany()
                        .HasForeignKey("InstancedStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("InstancedStat");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.InstancedStat", b =>
                {
                    b.HasOne("UntitledRpgLogic.Models.StatDefinition", "StatDefinition")
                        .WithMany()
                        .HasForeignKey("StatDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatDefinition");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.LinkedStats", b =>
                {
                    b.HasOne("UntitledRpgLogic.Models.StatDefinition", "DependentStat")
                        .WithMany("LinkedStats")
                        .HasForeignKey("DependentStatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UntitledRpgLogic.Models.StatDefinition", "LinkedStat")
                        .WithMany()
                        .HasForeignKey("LinkedStatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DependentStat");

                    b.Navigation("LinkedStat");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.ModifierDefinition", b =>
                {
                    b.HasOne("UntitledRpgLogic.Models.ModificationEffect", "ModifierEffect")
                        .WithMany()
                        .HasForeignKey("ModifierEffectId");

                    b.HasOne("UntitledRpgLogic.Models.ModificationEffect", "StackEffect")
                        .WithMany()
                        .HasForeignKey("StackEffectId");

                    b.Navigation("ModifierEffect");

                    b.Navigation("StackEffect");
                });

            modelBuilder.Entity("UntitledRpgLogic.Models.StatDefinition", b =>
                {
                    b.Navigation("LinkedStats");
                });
#pragma warning restore 612, 618
        }
    }
}
