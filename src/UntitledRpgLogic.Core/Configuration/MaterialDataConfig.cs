using System.ComponentModel.DataAnnotations;
using UntitledRpgLogic.Core.Enums;
using UntitledRpgLogic.Core.Interfaces;

namespace UntitledRpgLogic.Core.Configuration;

/// <summary>
///     The configuration for a material in the game. This class defines the properties of a material, including its name,
///     color, temperature and density at different states of matter.
/// </summary>
public record MaterialDataConfig : ITomlConfig
{
	/// <summary>
	///     Optional. If provided in TOML, this specific Guid will be used for the material.
	///     If omitted, a new Guid will be generated by the game.
	/// </summary>
	public Guid? ExplicitId { get; set; }

	/// <summary>
	///     Materials will always have a name. This is required.
	/// </summary>
	[Required]
	public required string Name { get; set; }

	/// <summary>
	///     An optional plural name for the material. If not provided, the game will attempt to guess a plural form of the
	///     Name.
	/// </summary>
	public string? PluralName { get; set; }

	/// <summary>
	///     An optional name for the material that can be used as an adjective. E.g. "Copper" Soup vs "Coppery" Soup.
	///     <remarks>If not provided, the Name will be used as the adjective.</remarks>
	/// </summary>
	public string? NameAsAdjective { get; set; }
	/// <summary>
	/// Mechanical properties of the material.
	/// </summary>
	public MechanicalPropertiesConfig Mechanical { get; set; } = new();
	/// <summary>
	/// Thermal properties of the material.
	/// </summary>
	public ThermalPropertiesConfig Thermal { get; set; } = new();
	/// <summary>
	/// Electrical properties of the material.
	/// </summary>
	public ElectricalPropertiesConfig Electrical { get; set; } = new();
	/// <summary>
	/// Fantastical properties of the material.
	/// </summary>
	public FantasticalPropertiesConfig Fantastical { get; set; } = new();
	/// <summary>
	/// Properties specific to the material's state of matter.
	/// </summary>
	public Dictionary<StateOfMatter, StateSpecificPropertiesConfig> States { get; } = [];


	/// <inheritdoc />
	public ConfigType ConfigType => ConfigType.Material;
}
