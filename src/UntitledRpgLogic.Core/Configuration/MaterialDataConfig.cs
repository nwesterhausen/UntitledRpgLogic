using System.ComponentModel.DataAnnotations;
using System.Drawing;
using UntitledRpgLogic.Core.Enums;
using UntitledRpgLogic.Core.Interfaces;

namespace UntitledRpgLogic.Core.Configuration;

/// <summary>
///     The configuration for a material in the game. This class defines the properties of a material, including its name,
///     color, temperature and density at different states of matter.
/// </summary>
public record MaterialDataConfig : ITomlConfig
{
	/// <summary>
	///     Optional. If provided in TOML, this specific Guid will be used for the material.
	///     If omitted, a new Guid will be generated by the game.
	/// </summary>
	public Guid? ExplicitId { get; set; }

	/// <summary>
	///     Materials will always have a name. This is required.
	/// </summary>
	[Required]
	public required string Name { get; set; }

	/// <summary>
	///     An optional plural name for the material. If not provided, the game will attempt to guess a plural form of the
	///     Name.
	/// </summary>
	public string? PluralName { get; set; }

	/// <summary>
	///     An optional name for the material that can be used as an adjective. E.g. "Copper" Soup vs "Coppery" Soup.
	///     <remarks>If not provided, the Name will be used as the adjective.</remarks>
	/// </summary>
	public string? NameAsAdjective { get; set; }

	/// <summary>
	///     Optional. A color to represent the material in this state. This can be used to visually represent the material in a
	///     game or
	///     application. If not provided, will default to be a red color.
	/// </summary>
	public Color? LiquidColor { get; set; }

	/// <summary>
	/// The temperature at which the material boils from a liquid to a gas, in °C.
	/// </summary>
	/// <remarks>Should be null only if the material doesn't have a standard boiling point.</remarks>
	public float? BoilingPointCelsius { get; set; }

	/// <summary>
	///     The density of the material at the state change, in grams per cubic centimeter (g/cm³).
	/// </summary>
	[Required]
	public required float DensityAtLiquidStateChange { get; set; }

	/// <summary>
	///     A color to represent the material in this state. This can be used to visually represent the material in a game or
	///     application.
	/// </summary>
	[Required]
	public required Color SolidColor { get; set; }

	/// <summary>
	/// The temperature at which the material melts from a solid to a liquid, in °C.
	/// </summary>
	/// <remarks>Null for materials that decompose or combust instead of melting (e.g., wood).</remarks>
	public float? MeltingPointCelsius { get; set; }

	/// <summary>
	///     The density of the material at the state change, in grams per cubic centimeter (g/cm³).
	/// </summary>
	[Required]
	public required float DensityAtSolidStateChange { get; set; }

	/// <summary>
	/// Optional. The temperature for materials that turn directly from a solid to a gas, in °C.
	/// </summary>
	/// <remarks>Relevant for materials like Dry Ice or Iodine.</remarks>
	public float? SublimationPointCelsius { get; set; }

	/// <summary>
	///     Optional. A color to represent the material in this state. This can be used to visually represent the material in a
	///     game or
	///     application. If not provided, will default to be a gray color.
	/// </summary>
	public Color? GasColor { get; set; }

	/// <summary>
	///     The temperature at which the material changes state, in degrees Celsius (°C).
	/// </summary>
	[Required]
	public required float TemperatureAtGasStateChange { get; set; }

	/// <summary>
	///     The density of the material at the state change, in grams per cubic centimeter (g/cm³).
	/// </summary>
	[Required]
	public required float DensityAtGasStateChange { get; set; }

	/// <summary>
	///     The molar mass of the material in grams per mole (g/mol).
	/// </summary>
	[Required]
	public required double MolarMass { get; set; }

	/// <summary>
	///     The coefficient of expansion (α) in 1/°C for the solid state.
	/// </summary>
	[Required]
	public required double SolidCoefficientOfExpansion { get; set; }

	/// <summary>
	///     The coefficient of expansion (β) in 1/°C for the liquid state.
	/// </summary>
	[Required]
	public required double LiquidCoefficientOfExpansion { get; set; }

	/// <summary>
	/// The ultimate tensile strength in Megapascals (MPa).
	/// Represents resistance to being pulled apart.
	/// </summary>
	public float? TensileStrengthMPa { get; set; }

	/// <summary>
	/// The ultimate compressive strength in Megapascals (MPa).
	/// Represents resistance to being crushed.
	/// </summary>
	public float? CompressiveStrengthMPa { get; set; }

	/// <summary>
	/// The material's hardness on the Mohs scale. A key factor for sharpness and wear resistance.
	/// </summary>
	public float? HardnessMohs { get; set; }

	/// <summary>
	/// A textual description of how the material breaks (e.g., "Brittle", "Conchoidal", "Hackly").
	/// This is a primary indicator of toughness vs. brittleness.
	/// </summary>
	public FractureType FractureType { get; set; } = FractureType.None;

	/// <summary>
	/// Resistance to elastic deformation. Defines Stiffness (Rigidity vs. Flexibility)
	/// </summary>
	public float? YoungsModulusGPa { get; set; }

	/// <summary>
	/// Ability to absorb a sudden blow. Defines Durability vs. Shock/Impact
	/// </summary>
	public float? ImpactStrengthJm2 { get; set; }

	/// <summary>
	/// Resistance to failure from cyclic stress. Defines Durability vs. Repeated Use/Wear
	/// </summary>
	public float? FatigueLimitMPa { get; set; }

	/// <summary>
	/// How much a material expands/contracts with heat. Defines Durability vs. Temperature Change
	/// </summary>
	/// <remarks>
	/// This can be simply set from the <see cref="SolidCoefficientOfExpansion"/>, lower is better.
	/// </remarks>
	public float? ThermalExpansionAlpha { get; set; }

	/// <inheritdoc />
	public ConfigType ConfigType => ConfigType.Material;
}
