// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UntitledRpgLogic.Infrastructure.Data;

#nullable disable

namespace UntitledRpgLogic.Infrastructure.Data.Migrations
{
    [DbContext(typeof(RpgDbContext))]
    [Migration("20250908203234_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("AbilityActiveEffects", b =>
                {
                    b.Property<byte[]>("AbilitiesUsingAsActiveId")
                        .HasColumnType("BLOB")
                        .HasColumnName("abilities_using_as_active_id");

                    b.Property<byte[]>("ActiveEffectsId")
                        .HasColumnType("BLOB")
                        .HasColumnName("active_effects_id");

                    b.HasKey("AbilitiesUsingAsActiveId", "ActiveEffectsId")
                        .HasName("pk_ability_active_effects");

                    b.HasIndex("ActiveEffectsId")
                        .HasDatabaseName("ix_ability_active_effects_active_effects_id");

                    b.ToTable("ability_active_effects", (string)null);
                });

            modelBuilder.Entity("AbilityFailureEffects", b =>
                {
                    b.Property<byte[]>("AbilitiesUsingAsFailureId")
                        .HasColumnType("BLOB")
                        .HasColumnName("abilities_using_as_failure_id");

                    b.Property<byte[]>("FailureEffectsId")
                        .HasColumnType("BLOB")
                        .HasColumnName("failure_effects_id");

                    b.HasKey("AbilitiesUsingAsFailureId", "FailureEffectsId")
                        .HasName("pk_ability_failure_effects");

                    b.HasIndex("FailureEffectsId")
                        .HasDatabaseName("ix_ability_failure_effects_failure_effects_id");

                    b.ToTable("ability_failure_effects", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Ability", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("AbilityType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ability_type");

                    b.Property<bool>("AffectsAllies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("affects_allies");

                    b.Property<bool>("AffectsCaster")
                        .HasColumnType("INTEGER")
                        .HasColumnName("affects_caster");

                    b.Property<float>("CastTime")
                        .HasColumnType("REAL")
                        .HasColumnName("cast_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfTargets")
                        .HasColumnType("INTEGER")
                        .HasColumnName("number_of_targets");

                    b.Property<byte[]>("SkillDisciplineId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("skill_discipline_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_type");

                    b.HasKey("Id")
                        .HasName("pk_abilities");

                    b.HasIndex("SkillDisciplineId")
                        .HasDatabaseName("ix_abilities_skill_discipline_id");

                    b.ToTable("abilities", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.AffectedAmbient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("AmbientId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("ambient_id");

                    b.Property<float>("AmountChange")
                        .HasColumnType("REAL")
                        .HasColumnName("amount_change");

                    b.Property<byte[]>("EffectId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("effect_id");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_percentage");

                    b.HasKey("Id")
                        .HasName("pk_affected_ambient");

                    b.HasIndex("EffectId")
                        .HasDatabaseName("ix_affected_ambient_effect_id");

                    b.ToTable("affected_ambient", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.AffectedStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<float>("AmountChange")
                        .HasColumnType("REAL")
                        .HasColumnName("amount_change");

                    b.Property<byte[]>("EffectId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("effect_id");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_percentage");

                    b.Property<byte[]>("StatId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("stat_id");

                    b.HasKey("Id")
                        .HasName("pk_affected_stat");

                    b.HasIndex("EffectId")
                        .HasDatabaseName("ix_affected_stat_effect_id");

                    b.ToTable("affected_stat", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.AppliedModifier", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("AppliedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("applied_at");

                    b.Property<byte[]>("EntityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("entity_id");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<byte[]>("ModifierDefinitionId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("modifier_definition_id");

                    b.Property<int>("Stacks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stacks");

                    b.HasKey("Id")
                        .HasName("pk_applied_modifiers");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("ix_applied_modifiers_entity_id");

                    b.HasIndex("ModifierDefinitionId")
                        .HasDatabaseName("ix_applied_modifiers_modifier_definition_id");

                    b.ToTable("applied_modifiers", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.CastingRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("AbilityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("ability_id");

                    b.Property<float>("AmountNeeded")
                        .HasColumnType("REAL")
                        .HasColumnName("amount_needed");

                    b.Property<byte[]>("RequiredEntityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("required_entity_id");

                    b.Property<int>("RequirementType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requirement_type");

                    b.HasKey("Id")
                        .HasName("pk_casting_requirement");

                    b.HasIndex("AbilityId")
                        .HasDatabaseName("ix_casting_requirement_ability_id");

                    b.ToTable("casting_requirement", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Effect", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<float>("Duration")
                        .HasColumnType("REAL")
                        .HasColumnName("duration");

                    b.Property<int>("EffectType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("effect_type");

                    b.HasKey("Id")
                        .HasName("pk_effects");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator<int>("EffectType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Entity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_entities");

                    b.ToTable("entities", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntityInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("capacity");

                    b.Property<byte[]>("EntityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("entity_id");

                    b.HasKey("Id")
                        .HasName("pk_entity_inventories");

                    b.HasIndex("EntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_inventories_entity_id");

                    b.ToTable("entity_inventories", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntitySkills", b =>
                {
                    b.Property<byte[]>("EntityId")
                        .HasColumnType("BLOB")
                        .HasColumnName("entity_id");

                    b.Property<byte[]>("InstancedSkillId")
                        .HasColumnType("BLOB")
                        .HasColumnName("instanced_skill_id");

                    b.HasKey("EntityId", "InstancedSkillId")
                        .HasName("pk_entity_skills");

                    b.HasIndex("EntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_skills_entity_id");

                    b.HasIndex("InstancedSkillId")
                        .HasDatabaseName("ix_entity_skills_instanced_skill_id");

                    b.ToTable("entity_skills", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntityStats", b =>
                {
                    b.Property<byte[]>("EntityId")
                        .HasColumnType("BLOB")
                        .HasColumnName("entity_id");

                    b.Property<byte[]>("InstancedStatId")
                        .HasColumnType("BLOB")
                        .HasColumnName("instanced_stat_id");

                    b.HasKey("EntityId", "InstancedStatId")
                        .HasName("pk_entity_stats");

                    b.HasIndex("EntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_stats_entity_id");

                    b.HasIndex("InstancedStatId")
                        .HasDatabaseName("ix_entity_stats_instanced_stat_id");

                    b.ToTable("entity_stats", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.FailureInfluence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("AbilityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("ability_id");

                    b.Property<float>("AmountAlwaysSucceed")
                        .HasColumnType("REAL")
                        .HasColumnName("amount_always_succeed");

                    b.Property<float>("InfluenceScale")
                        .HasColumnType("REAL")
                        .HasColumnName("influence_scale");

                    b.Property<byte[]>("RequiredEntityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("required_entity_id");

                    b.Property<int>("RequirementType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requirement_type");

                    b.HasKey("Id")
                        .HasName("pk_failure_influence");

                    b.HasIndex("AbilityId")
                        .HasDatabaseName("ix_failure_influence_ability_id");

                    b.ToTable("failure_influence", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.InstancedSkill", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("INTEGER")
                        .HasColumnName("experience_points");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("level");

                    b.Property<byte[]>("SkillDefinitionId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("skill_definition_id");

                    b.HasKey("Id")
                        .HasName("pk_instanced_skills");

                    b.HasIndex("SkillDefinitionId")
                        .HasDatabaseName("ix_instanced_skills_skill_definition_id");

                    b.ToTable("instanced_skills", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.InstancedStat", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("ApparentValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apparent_value");

                    b.Property<int>("BaseValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("base_value");

                    b.Property<byte[]>("StatDefinitionId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("stat_definition_id");

                    b.HasKey("Id")
                        .HasName("pk_instanced_stats");

                    b.HasIndex("StatDefinitionId")
                        .HasDatabaseName("ix_instanced_stats_stat_definition_id");

                    b.ToTable("instanced_stats", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ItemDefinition", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("ItemSubtype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_subtype");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_type");

                    b.Property<int>("MaxDurability")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_durability");

                    b.Property<int>("MaxStack")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_stack");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Quality")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quality");

                    b.Property<bool>("Stackable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stackable");

                    b.HasKey("Id")
                        .HasName("pk_item_definitions");

                    b.ToTable("item_definitions", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ItemInstance", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<byte[]>("CraftedById")
                        .HasColumnType("BLOB")
                        .HasColumnName("crafted_by_id");

                    b.Property<int>("Durability")
                        .HasColumnType("INTEGER")
                        .HasColumnName("durability");

                    b.Property<int?>("EntityInventoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entity_inventory_id");

                    b.Property<byte[]>("ItemDefinitionId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("item_definition_id");

                    b.Property<byte[]>("PrimaryMaterialId")
                        .HasColumnType("BLOB")
                        .HasColumnName("primary_material_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_item_instances");

                    b.HasIndex("EntityInventoryId")
                        .HasDatabaseName("ix_item_instances_entity_inventory_id");

                    b.HasIndex("ItemDefinitionId")
                        .HasDatabaseName("ix_item_instances_item_definition_id");

                    b.HasIndex("PrimaryMaterialId")
                        .HasDatabaseName("ix_item_instances_primary_material_id");

                    b.ToTable("item_instances", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.LearningRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("AbilityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("ability_id");

                    b.Property<float>("AmountNeeded")
                        .HasColumnType("REAL")
                        .HasColumnName("amount_needed");

                    b.Property<byte[]>("RequiredEntityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("required_entity_id");

                    b.Property<int>("RequirementType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requirement_type");

                    b.HasKey("Id")
                        .HasName("pk_learning_requirement");

                    b.HasIndex("AbilityId")
                        .HasDatabaseName("ix_learning_requirement_ability_id");

                    b.ToTable("learning_requirement", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.LinkedStats", b =>
                {
                    b.Property<byte[]>("DependentStatId")
                        .HasColumnType("BLOB")
                        .HasColumnName("dependent_stat_id");

                    b.Property<byte[]>("LinkedStatId")
                        .HasColumnType("BLOB")
                        .HasColumnName("linked_stat_id");

                    b.Property<float>("Ratio")
                        .HasColumnType("REAL")
                        .HasColumnName("ratio");

                    b.Property<byte[]>("StatDefinitionId")
                        .HasColumnType("BLOB")
                        .HasColumnName("stat_definition_id");

                    b.HasKey("DependentStatId", "LinkedStatId")
                        .HasName("pk_linked_stats");

                    b.HasIndex("LinkedStatId")
                        .HasDatabaseName("ix_linked_stats_linked_stat_id");

                    b.HasIndex("StatDefinitionId")
                        .HasDatabaseName("ix_linked_stats_stat_definition_id");

                    b.ToTable("linked_stats", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.LogEntry", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<byte[]>("EntityId")
                        .HasColumnType("BLOB")
                        .HasColumnName("entity_id");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_id");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<string>("Parameters")
                        .HasColumnType("TEXT")
                        .HasColumnName("parameters");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_log_entries");

                    b.ToTable("log_entries", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.MaterialDefinition", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_material_definitions");

                    b.ToTable("material_definitions", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ModificationEffect", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("FlatAmount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("flat_amount");

                    b.Property<float>("Percentage")
                        .HasColumnType("REAL")
                        .HasColumnName("percentage");

                    b.Property<float>("PercentageOfMax")
                        .HasColumnType("REAL")
                        .HasColumnName("percentage_of_max");

                    b.Property<bool>("Positive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("positive");

                    b.HasKey("Id")
                        .HasName("pk_modification_effects");

                    b.ToTable("modification_effects", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ModifierDefinition", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<float>("Duration")
                        .HasColumnType("REAL")
                        .HasColumnName("duration");

                    b.Property<bool>("IsAdditive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_additive");

                    b.Property<bool>("IsMultiplicative")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_multiplicative");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_permanent");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_positive");

                    b.Property<bool>("LoseAllStacksOnExpiration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lose_all_stacks_on_expiration");

                    b.Property<int>("MaxStacks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_stacks");

                    b.Property<byte[]>("ModifierEffectId")
                        .HasColumnType("BLOB")
                        .HasColumnName("modifier_effect_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priority");

                    b.Property<bool>("ScalesOnBaseValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scales_on_base_value");

                    b.Property<byte[]>("StackEffectId")
                        .HasColumnType("BLOB")
                        .HasColumnName("stack_effect_id");

                    b.HasKey("Id")
                        .HasName("pk_modifier_definitions");

                    b.HasIndex("ModifierEffectId")
                        .HasDatabaseName("ix_modifier_definitions_modifier_effect_id");

                    b.HasIndex("StackEffectId")
                        .HasDatabaseName("ix_modifier_definitions_stack_effect_id");

                    b.ToTable("modifier_definitions", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.SkillDefinition", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("PointsForFirstLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("points_for_first_level");

                    b.Property<int>("ScalingCurve")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scaling_curve");

                    b.Property<float>("ScalingFactorA")
                        .HasColumnType("REAL")
                        .HasColumnName("scaling_factor_a");

                    b.Property<float>("ScalingFactorB")
                        .HasColumnType("REAL")
                        .HasColumnName("scaling_factor_b");

                    b.Property<float>("ScalingFactorC")
                        .HasColumnType("REAL")
                        .HasColumnName("scaling_factor_c");

                    b.HasKey("Id")
                        .HasName("pk_skill_definitions");

                    b.ToTable("skill_definitions", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.StatCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("AbilityId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("ability_id");

                    b.Property<byte[]>("AffectedStatId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("affected_stat_id");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("amount");

                    b.HasKey("Id")
                        .HasName("pk_stat_cost");

                    b.HasIndex("AbilityId")
                        .HasDatabaseName("ix_stat_cost_ability_id");

                    b.ToTable("stat_cost", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.StatDefinition", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<bool>("HasChangeableValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("has_changeable_value");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_value");

                    b.Property<int>("MinValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("min_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Variation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("variation");

                    b.HasKey("Id")
                        .HasName("pk_stat_definitions");

                    b.ToTable("stat_definitions", (string)null);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.BuffEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.CharmEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.DamageEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.Property<float>("BaseAmount")
                        .HasColumnType("REAL")
                        .HasColumnName("base_amount");

                    b.Property<byte[]>("DamageTypeId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("damage_type_id");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.DebuffEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ElementalEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EnchantEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.HealEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.SummonEffect", b =>
                {
                    b.HasBaseType("UntitledRpgLogic.Core.Models.Effect");

                    b.Property<byte[]>("EntityToSummonId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("entity_to_summon_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.ToTable("effects", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AbilityActiveEffects", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesUsingAsActiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ability_active_effects_abilities_abilities_using_as_active_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.Effect", null)
                        .WithMany()
                        .HasForeignKey("ActiveEffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ability_active_effects_effects_active_effects_id");
                });

            modelBuilder.Entity("AbilityFailureEffects", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesUsingAsFailureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ability_failure_effects_abilities_abilities_using_as_failure_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.Effect", null)
                        .WithMany()
                        .HasForeignKey("FailureEffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ability_failure_effects_effects_failure_effects_id");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Ability", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.SkillDefinition", "SkillDiscipline")
                        .WithMany("Abilities")
                        .HasForeignKey("SkillDisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abilities_skill_definitions_skill_discipline_id");

                    b.Navigation("SkillDiscipline");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.AffectedAmbient", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Effect", "Effect")
                        .WithMany("AffectedAmbients")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_affected_ambient_effects_effect_id");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.AffectedStat", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Effect", "Effect")
                        .WithMany("AffectedStats")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_affected_stat_effects_effect_id");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.AppliedModifier", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applied_modifiers_entities_entity_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.ModifierDefinition", "ModifierDefinition")
                        .WithMany()
                        .HasForeignKey("ModifierDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applied_modifiers_modifier_definitions_modifier_definition_id");

                    b.Navigation("Entity");

                    b.Navigation("ModifierDefinition");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.CastingRequirement", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Ability", "Ability")
                        .WithMany("CastingRequirements")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_casting_requirement_abilities_ability_id");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntityInventory", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Entity", "Entity")
                        .WithOne("Inventory")
                        .HasForeignKey("UntitledRpgLogic.Core.Models.EntityInventory", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_inventories_entities_entity_id");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntitySkills", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Entity", "Entity")
                        .WithOne("Skills")
                        .HasForeignKey("UntitledRpgLogic.Core.Models.EntitySkills", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_skills_entities_entity_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.InstancedSkill", "InstancedSkill")
                        .WithMany()
                        .HasForeignKey("InstancedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_skills_instanced_skills_instanced_skill_id");

                    b.Navigation("Entity");

                    b.Navigation("InstancedSkill");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntityStats", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Entity", "Entity")
                        .WithOne("Stats")
                        .HasForeignKey("UntitledRpgLogic.Core.Models.EntityStats", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_stats_entities_entity_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.InstancedStat", "InstancedStat")
                        .WithMany()
                        .HasForeignKey("InstancedStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_stats_instanced_stats_instanced_stat_id");

                    b.Navigation("Entity");

                    b.Navigation("InstancedStat");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.FailureInfluence", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Ability", "Ability")
                        .WithMany("FailureInfluences")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_failure_influence_abilities_ability_id");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.InstancedSkill", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.SkillDefinition", "SkillDefinition")
                        .WithMany()
                        .HasForeignKey("SkillDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instanced_skills_skill_definitions_skill_definition_id");

                    b.Navigation("SkillDefinition");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.InstancedStat", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.StatDefinition", "StatDefinition")
                        .WithMany()
                        .HasForeignKey("StatDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instanced_stats_stat_definitions_stat_definition_id");

                    b.Navigation("StatDefinition");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ItemInstance", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.EntityInventory", null)
                        .WithMany("Items")
                        .HasForeignKey("EntityInventoryId")
                        .HasConstraintName("fk_item_instances_entity_inventories_entity_inventory_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.ItemDefinition", "ItemDefinition")
                        .WithMany()
                        .HasForeignKey("ItemDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_instances_item_definitions_item_definition_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.MaterialDefinition", "PrimaryMaterial")
                        .WithMany()
                        .HasForeignKey("PrimaryMaterialId")
                        .HasConstraintName("fk_item_instances_material_definitions_primary_material_id");

                    b.Navigation("ItemDefinition");

                    b.Navigation("PrimaryMaterial");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.LearningRequirement", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Ability", "Ability")
                        .WithMany("LearningRequirements")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learning_requirement_abilities_ability_id");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.LinkedStats", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.StatDefinition", "DependentStat")
                        .WithMany()
                        .HasForeignKey("DependentStatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_linked_stats_stat_definitions_dependent_stat_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.StatDefinition", "LinkedStat")
                        .WithMany()
                        .HasForeignKey("LinkedStatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_linked_stats_stat_definitions_linked_stat_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.StatDefinition", null)
                        .WithMany("LinkedStats")
                        .HasForeignKey("StatDefinitionId")
                        .HasConstraintName("fk_linked_stats_stat_definitions_stat_definition_id");

                    b.Navigation("DependentStat");

                    b.Navigation("LinkedStat");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.ModifierDefinition", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.ModificationEffect", "ModifierEffect")
                        .WithMany()
                        .HasForeignKey("ModifierEffectId")
                        .HasConstraintName("fk_modifier_definitions_modification_effects_modifier_effect_id");

                    b.HasOne("UntitledRpgLogic.Core.Models.ModificationEffect", "StackEffect")
                        .WithMany()
                        .HasForeignKey("StackEffectId")
                        .HasConstraintName("fk_modifier_definitions_modification_effects_stack_effect_id");

                    b.Navigation("ModifierEffect");

                    b.Navigation("StackEffect");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.StatCost", b =>
                {
                    b.HasOne("UntitledRpgLogic.Core.Models.Ability", "Ability")
                        .WithMany("StatCosts")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stat_cost_abilities_ability_id");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Ability", b =>
                {
                    b.Navigation("CastingRequirements");

                    b.Navigation("FailureInfluences");

                    b.Navigation("LearningRequirements");

                    b.Navigation("StatCosts");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Effect", b =>
                {
                    b.Navigation("AffectedAmbients");

                    b.Navigation("AffectedStats");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.Entity", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Skills");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.EntityInventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.SkillDefinition", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("UntitledRpgLogic.Core.Models.StatDefinition", b =>
                {
                    b.Navigation("LinkedStats");
                });
#pragma warning restore 612, 618
        }
    }
}
