@*
    A reusable component for a color input field.
    It provides a text input for hex color codes and a color picker.
*@
@inherits InputBase<Color?>
@using System.Drawing
@using System.Globalization

<div class="form-control">
    <label class="label">
        <span class="label-text">@Label</span>
    </label>
    <div class="input-group">
        <span>#</span>
        <input type="text" value="@_hexValue.Substring(1)" @oninput="OnHexValueChanged" class="input input-bordered w-full" />
        <input type="color" value="@_hexValue" @oninput="OnHexValueChanged" class="w-10 h-full p-1" />
    </div>
    <div class="label">
        <span class="label-text-alt"><ValidationMessage For="() => CurrentValue" /></span>
    </div>
</div>

@code {
    private string _hexValue = "#ffffff";

    /// <summary>
    /// The text to display in the label for this input field.
    /// </summary>
    [Parameter]
    public string Label { get; set; } = string.Empty;

    /// <summary>
    /// Handles the oninput event from the text and color inputs.
    /// </summary>
    private void OnHexValueChanged(ChangeEventArgs e)
    {
        var newHex = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(newHex)) return;

        // The color picker returns a full hex string (e.g., #RRGGBB)
        // The text input might not have the leading '#'
        if (!newHex.StartsWith("#"))
        {
            newHex = "#" + newHex;
        }

        if (_hexValue == newHex) return;
        _hexValue = newHex;

        try
        {
            // When the hex value changes, update the underlying CurrentValue
            // which is managed by the InputBase class.
            CurrentValue = ColorTranslator.FromHtml(_hexValue);
        }
        catch (Exception)
        {
            // If the hex is invalid, set the value to null or handle as needed.
            CurrentValue = null;
        }
    }

    /// <summary>
    /// This is required for the InputBase to work correctly.
    /// It defines how a string value is parsed into the component's type.
    /// </summary>
    protected override bool TryParseValueFromString(string? value, out Color? result, out string validationErrorMessage)
    {
        // This component doesn't use direct string parsing, but this method is required.
        // We can satisfy the contract by assuming the current value is valid.
        result = CurrentValue;
        validationErrorMessage = string.Empty;
        return true;
    }

    /// <summary>
    /// When the component's parameters are set, ensure the local hex value
    /// reflects the CurrentValue from the base class.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (CurrentValue.HasValue)
        {
            _hexValue = $"#{CurrentValue.Value.R:X2}{CurrentValue.Value.G:X2}{CurrentValue.Value.B:X2}";
        }
        else
        {
            // Set a default if the bound value is null
            _hexValue = "#000000";
        }
    }
}
