@*
    A reusable component for a color input field.
    It provides a text input for hex color codes and a color picker.
*@
@inherits InputBase<Color?>
@using System.Drawing
@using System.Globalization

<div class="form-control">
    <label class="label">
        <span class="label-text">@Label</span>
    </label>
    <div class="input-group">
        <span>#</span>
        <input type="text" @bind="HexValue" @bind:event="oninput" class="input input-bordered w-full" />
        <input type="color" @bind="HexValue" @bind:event="oninput" class="w-10 h-full p-1" />
    </div>
    <div class="label">
        <span class="label-text-alt"><ValidationMessage For="() => CurrentValue" /></span>
    </div>
</div>

@code {
    private string _hexValue = "#ffffff";

    /// <summary>
    /// The text to display in the label for this input field.
    /// </summary>
    [Parameter]
    public string Label { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the color value as a hex string.
    /// This acts as a proxy to the base component's CurrentValue property.
    /// </summary>
    private string HexValue
    {
        get => _hexValue;
        set
        {
            if (_hexValue == value) return;
            _hexValue = value;

            try
            {
                // When the hex value changes, update the underlying CurrentValue
                // which is managed by the InputBase class.
                CurrentValue = ColorTranslator.FromHtml(value);
            }
            catch (Exception)
            {
                // If the hex is invalid, set the value to null or handle as needed.
                CurrentValue = null;
            }
        }
    }

    /// <summary>
    /// This is required for the InputBase to work correctly.
    /// It defines how a string value is parsed into the component's type.
    /// </summary>
    protected override bool TryParseValueFromString(string? value, out Color? result, out string validationErrorMessage)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            result = null;
            validationErrorMessage = string.Empty;
            return true;
        }

        try
        {
            result = ColorTranslator.FromHtml(value);
            validationErrorMessage = string.Empty;
            return true;
        }
        catch (Exception)
        {
            result = null;
            validationErrorMessage = "Invalid hex color format.";
            return false;
        }
    }

    /// <summary>
    /// When the component's parameters are set, ensure the local hex value
    /// reflects the CurrentValue from the base class.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (CurrentValue.HasValue)
        {
            _hexValue = $"#{CurrentValue.Value.R:X2}{CurrentValue.Value.G:X2}{CurrentValue.Value.B:X2}";
        }
        else
        {
            // Set a default if the bound value is null
            _hexValue = "#000000";
        }
    }
}
