@page "/config-test"
@using System.Text
@using Tomlet
@using UntitledRpgLogic.Core.Configuration
@using UntitledRpgLogic.Core.Interfaces

@inject ITomlConfigHandler ConfigHandler
@inject ILogger<ConfigTestPage> Logger

<div class="container mx-auto p-4">
	<h3 class="text-3xl font-bold mb-6 text-primary">TOML Config Test Page</h3>

	@* Input Section *@
	<div class="card bg-base-200 shadow-xl mb-6">
		<div class="card-body">
			<h4 class="card-title text-secondary">Input TOML</h4>
			<p class="text-sm text-neutral-content mb-2">Paste your TOML content below (e.g., for an ItemDataConfig with
				ConfigType="Item").</p>
			<textarea @bind="InputTomlContent" class="textarea textarea-bordered h-48 font-mono text-sm"
			          placeholder="Paste TOML here..."></textarea>
			<div class="card-actions justify-end mt-4">
				<button @onclick="LoadConfig" class="btn btn-primary">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
					     stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						      d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
					</svg>
					Load Config
				</button>
			</div>
		</div>
	</div>

	@* Status Message *@
	@if (!string.IsNullOrEmpty(StatusMessage))
	{
		<div class="alert @(IsError ? "alert-error" : "alert-success") shadow-lg mb-6">
			<div>
				@if (IsError)
				{
					<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none"
					     viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						      d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
				}
				else
				{
					<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none"
					     viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
				}
				<span>@StatusMessage</span>
			</div>
		</div>
	}

	@* Loaded Config Display Section *@
	<div class="card bg-base-200 shadow-xl mb-6">
		<div class="card-body">
			<h4 class="card-title text-secondary">Loaded Item Configuration</h4>
			@if (LoadedItemConfig != null)
			{
				<div class="overflow-x-auto">
					<table class="table w-full">
						<tbody>
						<tr>
							<th class="w-1/4">Config Type:</th>
							<td>@LoadedItemConfig.ConfigType</td>
						</tr>
						<tr>
							<th class="w-1/4">Name:</th>
							<td>@LoadedItemConfig.Name</td>
						</tr>
						<tr>
							<th class="w-1/4">Item Type:</th>
							<td>@LoadedItemConfig.ItemType</td>
						</tr>
						<tr>
							<th class="w-1/4">Item Subtype:</th>
							<td>@LoadedItemConfig.ItemSubtype</td>
						</tr>
						<tr>
							<th class="w-1/4">Item Quality:</th>
							<td>@LoadedItemConfig.ItemQuality</td>
						</tr>
						<tr>
							<th class="w-1/4">Width:</th>
							<td>@LoadedItemConfig.Width</td>
						</tr>
						<tr>
							<th class="w-1/4">Height:</th>
							<td>@LoadedItemConfig.Height</td>
						</tr>
						<tr>
							<th class="w-1/4">Depth:</th>
							<td>@LoadedItemConfig.Depth</td>
						</tr>
						<tr>
							<th class="w-1/4">Material ID:</th>
							<td>@LoadedItemConfig.MaterialId</td>
						</tr>
						</tbody>
					</table>
				</div>
			}
			else
			{
				<p class="text-neutral-content">No item configuration loaded yet.</p>
			}
			<div class="card-actions justify-end mt-4">
				<button @onclick="SaveAndDisplayConfig" class="btn btn-accent" disabled="@(LoadedItemConfig == null)">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
					     stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						      d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
					</svg>
					Save & Display Config (TOML)
				</button>
			</div>
		</div>
	</div>

	@* Output Section *@
	<div class="card bg-base-200 shadow-xl">
		<div class="card-body">
			<h4 class="card-title text-secondary">Output TOML</h4>
			<p class="text-sm text-neutral-content mb-2">This textarea shows the TOML generated from the loaded item
				config.</p>
			<textarea @bind="OutputTomlContent" class="textarea textarea-bordered h-48 font-mono text-sm"
			          readonly></textarea>
		</div>
	</div>
</div>

@code {
	private string InputTomlContent { get; set; } = string.Empty;
	private string OutputTomlContent { get; set; } = string.Empty;
	private ItemDataConfig? LoadedItemConfig { get; set; }
	private string? StatusMessage { get; set; }
	private bool IsError { get; set; }

	/// <summary>
	///     Handles loading configuration from the input textarea.
	/// </summary>
	private void LoadConfig()
	{
		StatusMessage = null;
		IsError = false;
		LoadedItemConfig = null;
		OutputTomlContent = string.Empty;

		if (string.IsNullOrWhiteSpace(InputTomlContent))
		{
			SetStatus("Input TOML content cannot be empty.", true);
			return;
		}

		try
		{
			// Convert string to byte array as TomlConfigHandler expects byte[]
			var contentBytes = Encoding.UTF8.GetBytes(InputTomlContent);
			LoadedItemConfig = ConfigHandler.LoadConfig<ItemDataConfig>(contentBytes);
			SetStatus("Configuration loaded successfully!");
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Failed to load TOML configuration.");
			SetStatus($"Failed to load configuration: {ex.Message}", true);
		}
	}

	/// <summary>
	///     Handles saving the current loaded configuration back to TOML string.
	/// </summary>
	private void SaveAndDisplayConfig()
	{
		StatusMessage = null;
		IsError = false;

		if (LoadedItemConfig == null)
		{
			SetStatus("No configuration is loaded to save.", true);
			return;
		}

		try
		{
			// Serialize the LoadedItemConfig object back to a TOML string
			OutputTomlContent = TomletMain.TomlStringFrom(LoadedItemConfig);
			SetStatus("Configuration saved/displayed as TOML successfully!");
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Failed to save/display TOML configuration.");
			SetStatus($"Failed to save/display configuration: {ex.Message}", true);
		}
	}

	private void SetStatus(string message, bool isError = false)
	{
		StatusMessage = message;
		IsError = isError;
	}

}
