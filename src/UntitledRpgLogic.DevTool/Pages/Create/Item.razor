@page "/create/item"
@using UntitledRpgLogic.Core.Configuration
@using UntitledRpgLogic.Core.Enums

<div class="container mx-auto p-6">
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <h2 class="card-title text-2xl mb-6">New Item</h2>

            <EditForm Model="@itemConfig" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Basic Information -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Name <span class="text-error">*</span></span>
                        </label>
                        <InputText @bind-Value="itemConfig.Name" class="input input-bordered"
                                   placeholder="Enter item name"/>
                        <ValidationMessage For="@(() => itemConfig.Name)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Plural Name</span>
                        </label>
                        <InputText @bind-Value="itemConfig.PluralName" class="input input-bordered"
                                   placeholder="Enter plural name (optional)"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Name as Adjective</span>
                        </label>
                        <InputText @bind-Value="itemConfig.NameAsAdjective" class="input input-bordered"
                                   placeholder="Enter adjective form (optional)"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Item Type <span class="text-error">*</span></span>
                        </label>
                        <InputSelect @bind-Value="itemConfig.ItemType" class="select select-bordered">
                            <option value="">Select item type</option>
                            @foreach (var type in Enum.GetValues<ItemType>())
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => itemConfig.ItemType)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Item Subtype</span>
                        </label>
                        <InputSelect @bind-Value="itemConfig.ItemSubtype" class="select select-bordered">
                            <option value="">Select subtype (optional)</option>
                            @foreach (var subtype in Enum.GetValues<ItemSubtype>())
                            {
                                <option value="@subtype">@subtype</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Quality</span>
                        </label>
                        <InputSelect @bind-Value="itemConfig.ItemQuality" class="select select-bordered">
                            <option value="">Select quality (optional)</option>
                            @foreach (var quality in Enum.GetValues<Quality>())
                            {
                                <option value="@quality">@quality</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Dimensions -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Dimension Scale</span>
                        </label>
                        <InputSelect @bind-Value="itemConfig.DimensionScale" class="select select-bordered">
                            <option value="">Select scale (optional)</option>
                            @foreach (var scale in Enum.GetValues<DimensionScale>())
                            {
                                <option value="@scale">@scale</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Width <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="itemConfig.Width" class="input input-bordered"
                                     placeholder="Enter width"/>
                        <ValidationMessage For="@(() => itemConfig.Width)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Height <span class="text-error">*</span></span>
                        </label>
                        <InputNumber @bind-Value="itemConfig.Height" class="input input-bordered"
                                     placeholder="Enter height"/>
                        <ValidationMessage For="@(() => itemConfig.Height)" class="text-error text-sm"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Depth</span>
                        </label>
                        <InputNumber @bind-Value="itemConfig.Depth" class="input input-bordered"
                                     placeholder="Enter depth (optional)"/>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Shape Type</span>
                        </label>
                        <InputSelect @bind-Value="itemConfig.ShapeType" class="select select-bordered">
                            <option value="">Select shape (optional)</option>
                            @foreach (var shape in Enum.GetValues<ShapeType>())
                            {
                                <option value="@shape">@shape</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Material ID <span class="text-error">*</span></span>
                        </label>
                        <InputText @bind-Value="materialIdString" class="input input-bordered"
                                   placeholder="Enter material GUID"/>
                        <ValidationMessage For="@(() => itemConfig.MaterialId)" class="text-error text-sm"/>
                    </div>
                </div>

                <!-- Description -->
                <div class="form-control mt-4">
                    <label class="label">
                        <span class="label-text">Description</span>
                    </label>
                    <InputTextArea @bind-Value="itemConfig.Description" class="textarea textarea-bordered h-24"
                                   placeholder="Enter item description (optional)"/>
                </div>

                <!-- Advanced Options -->
                <div class="collapse collapse-arrow bg-base-200 mt-4">
                    <input type="checkbox"/>
                    <div class="collapse-title text-xl font-medium">
                        Advanced Options
                    </div>
                    <div class="collapse-content">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Explicit ID</span>
                                </label>
                                <InputText @bind-Value="explicitIdString" class="input input-bordered"
                                           placeholder="Enter explicit GUID (optional)"/>
                            </div>

                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Crafted By</span>
                                </label>
                                <InputText @bind-Value="craftedByString" class="input input-bordered"
                                           placeholder="Enter crafter GUID (optional)"/>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-actions justify-end mt-6">
                    <button type="button" class="btn btn-ghost" @onclick="ResetForm">Reset</button>
                    <button type="submit" class="btn btn-primary">Create Item</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ItemDataConfig itemConfig = new() { Name = "", ItemType = ItemType.Junk, Width = 1, Height = 1, MaterialId = Guid.Empty };
    private string materialIdString = "";
    private string explicitIdString = "";
    private string craftedByString = "";

    protected override void OnInitialized()
    {
        ResetForm();
    }

    private void HandleValidSubmit()
    {
        // Parse GUIDs
        if (Guid.TryParse(materialIdString, out var materialId))
        {
            itemConfig = itemConfig with { MaterialId = materialId };
        }

        if (!string.IsNullOrEmpty(explicitIdString) && Guid.TryParse(explicitIdString, out var explicitId))
        {
            itemConfig = itemConfig with { ExplicitId = explicitId };
        }

        if (!string.IsNullOrEmpty(craftedByString) && Guid.TryParse(craftedByString, out var craftedBy))
        {
            itemConfig = itemConfig with { CraftedBy = craftedBy };
        }

        // TODO: Handle item creation logic
        // For now, just show success message
        Console.WriteLine($"Item created: {itemConfig.Name}");
    }

    private void ResetForm()
    {
        itemConfig = new ItemDataConfig { Name = "", ItemType = ItemType.Junk, Width = 1, Height = 1, MaterialId = Guid.Empty };
        materialIdString = "";
        explicitIdString = "";
        craftedByString = "";
    }

}
